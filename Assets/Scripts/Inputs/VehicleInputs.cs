//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Scripts/Inputs/VehicleInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VehicleInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VehicleInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VehicleInputs"",
    ""maps"": [
        {
            ""name"": ""VehicleMovement"",
            ""id"": ""314f0afc-4fc0-4379-9747-8535c9d1e3ae"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4a7159d4-4cc2-4c11-8b9c-a5aac0fae47a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""9896e40f-b306-4da3-baf1-68d4ae456fa1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5b5b407e-57db-4ba9-9ab7-242f502ef3e5"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""49e58c26-db5b-4668-88e5-0fddc9079067"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9ddad5dc-c154-403d-96b9-d90df6731d18"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2c955f1b-f8f9-48f2-8459-97bef0c5e299"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d05e317c-0a51-4c86-adb4-7ee48a2637d5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e064c50e-41a2-4904-9a7a-4e6518e90645"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""VehicleActions"",
            ""id"": ""6c3fafb5-c247-4594-b44c-73a565b2c8cc"",
            ""actions"": [
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""1fb95438-49dc-466f-a7c7-3a0f0fc47c83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3840e78-49bb-496b-9d53-20b2c5531705"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VehicleMovement
        m_VehicleMovement = asset.FindActionMap("VehicleMovement", throwIfNotFound: true);
        m_VehicleMovement_Look = m_VehicleMovement.FindAction("Look", throwIfNotFound: true);
        m_VehicleMovement_Movement = m_VehicleMovement.FindAction("Movement", throwIfNotFound: true);
        // VehicleActions
        m_VehicleActions = asset.FindActionMap("VehicleActions", throwIfNotFound: true);
        m_VehicleActions_Brake = m_VehicleActions.FindAction("Brake", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VehicleMovement
    private readonly InputActionMap m_VehicleMovement;
    private IVehicleMovementActions m_VehicleMovementActionsCallbackInterface;
    private readonly InputAction m_VehicleMovement_Look;
    private readonly InputAction m_VehicleMovement_Movement;
    public struct VehicleMovementActions
    {
        private @VehicleInputs m_Wrapper;
        public VehicleMovementActions(@VehicleInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_VehicleMovement_Look;
        public InputAction @Movement => m_Wrapper.m_VehicleMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_VehicleMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VehicleMovementActions set) { return set.Get(); }
        public void SetCallbacks(IVehicleMovementActions instance)
        {
            if (m_Wrapper.m_VehicleMovementActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_VehicleMovementActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_VehicleMovementActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_VehicleMovementActionsCallbackInterface.OnLook;
                @Movement.started -= m_Wrapper.m_VehicleMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_VehicleMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_VehicleMovementActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_VehicleMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public VehicleMovementActions @VehicleMovement => new VehicleMovementActions(this);

    // VehicleActions
    private readonly InputActionMap m_VehicleActions;
    private IVehicleActionsActions m_VehicleActionsActionsCallbackInterface;
    private readonly InputAction m_VehicleActions_Brake;
    public struct VehicleActionsActions
    {
        private @VehicleInputs m_Wrapper;
        public VehicleActionsActions(@VehicleInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Brake => m_Wrapper.m_VehicleActions_Brake;
        public InputActionMap Get() { return m_Wrapper.m_VehicleActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VehicleActionsActions set) { return set.Get(); }
        public void SetCallbacks(IVehicleActionsActions instance)
        {
            if (m_Wrapper.m_VehicleActionsActionsCallbackInterface != null)
            {
                @Brake.started -= m_Wrapper.m_VehicleActionsActionsCallbackInterface.OnBrake;
                @Brake.performed -= m_Wrapper.m_VehicleActionsActionsCallbackInterface.OnBrake;
                @Brake.canceled -= m_Wrapper.m_VehicleActionsActionsCallbackInterface.OnBrake;
            }
            m_Wrapper.m_VehicleActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
            }
        }
    }
    public VehicleActionsActions @VehicleActions => new VehicleActionsActions(this);
    public interface IVehicleMovementActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IVehicleActionsActions
    {
        void OnBrake(InputAction.CallbackContext context);
    }
}
